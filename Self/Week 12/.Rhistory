library(tuneR)
library(seewave)
sr=8000 #sampling rate
t=seq(0,2,1/sr) #times in secs if sample for 2 secs at 8KHz
y=(2^15-1)*sin(2*pi*440*t)  #sine wave a 440 Hz scaled to fill out 16 bit range
plot(y,type='l') #cannot see the wave
plot(y[1:500], type='l')
plot(y[1:8000], type='l')
plot(y[1:500], type='l')
w=Wave(y,samp.rate=sr, bit=16) #convert to sound
play(w)
plot(y[1:500], type='l')
y1=(2^15-1)*sin(2*pi*220*t) #change the frequency to 220Hz frequency
w1=Wave(y1,samp.rate=sr, bit=16) #convert to sound
play(w1)
par(mfrow=c(2,1))
plot(y[1:500], type='l')
plot(y1[1:500],type='l')
#compare in 1 layout (make redundant grapg for easier comparison)
par(mfrow=c(1,1))
plot(y[1:500], type='l')
lines(y1[1:500], lty=3,col="red")
wsum=normalize(w+w1, unit='16') #must normalize to make it also 16Hz
play(wsum)
plot((y+y1)[1:500], type='l') #the combination plot
w3<-normalize(bind(w,w1,wsum), unit='16') #to hear one by one.. bukan combine
play(w3)
y3<-c(y,y1,y+y1)
plot(y3, type='l')
Au1<-sine(500,duration=100000) # 500 freq, duration if 100,000, means if divide
#44100, its in 2+ second only
play(Au1)
Au2<-noise(duration=100000) #look noise function from ?sine
Au2<-noise(kind='pink', duration=100000) #change to pink noise (correlated noise)
Au3<-pulse(220, duration=100000)
#Plot 3 signal above
par(mfrow=c(3,1))
plot(Au1[1:1000])
plot(Au2[1:1000])
plot(Au3[1:1000])
Au4<-sawtooth(100,duration=100000)
plot(Au4[1:1000])
plot(Au4[1:2000])
plot(Au1[1:1000])
plot(Au2[1:1000])
plot(Au3[1:1000])
plot(Au1[1:1000])
#Play one by one all Au1 to Au5
Asum=normalize(bind(Au1,Au2,Au3,Au4,Au5), unit='32')
data(tico) #bird chipping
play(tico)
par(mfrow=c(1,1))
timer(tico,f=22050, treshold=5, msmooth=c(50,0)) #f is freq, msmooth to smooth the line
timer(tico,f=22050, threshold=5, msmooth=c(100,0))
sr=8000
t=seq(0,2,1/sr)
y=(2^15-1)*sin(2*pi*440*t)
plot(y[1:500],type='l')
spectrum(y,span=20,log=c("no")) #spectrum under fourier transform
plot.frequency.spectrum<-function(x.k,xlimits=c(0, length(x.k))){
plot.data<-cbind(0:(length(x.k)-1), Mod(x.k))
#TODO: why this scaling is necessary?
plot.data[2:length(x.k),2]<-2*plot.data[2:length(x.k),2]
plot(plot.data,t='h',lwd=2,main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0, max(Mod(plot.data[,2]))))
}
Yk<-fft(y) #fast faourier transform
plot.frequency.spectrum(Yk)
plot.frequency.spectrum(Yk[1:5000]) #look roughly where the signal is
plot.frequency.spectrum(Yk[1:1000]) #around 800+
data(tico)
Ticok<-fft(tico@left) #audio file have left channel and right channel. choose left
plot.frequency.spectrum(Ticok[1:(length(Ticok)/2)])
library(rpanel)
dynspec(tico, wl=1024,osc=TRUE) #function seewave. wl is sliding window
spectro(tico) #give spectogram
meanspec(tico)
meanspec(tico)
Audio<-readWave('audio.wav')
library(tuneR)
library(seewave)
Audio<-readWave('audio.wav')
Audio<-readWave('C:\\Users\\user\\Documents\\audio.wav')
plot.frequency.spectrum<-function(x.k,xlimits=c(0, length(x.k))){
plot.data<-cbind(0:(length(x.k)-1), Mod(x.k))
#TODO: why this scaling is necessary?
plot.data[2:length(x.k),2]<-2*plot.data[2:length(x.k),2]
plot(plot.data,t='h',lwd=2,main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0, max(Mod(plot.data[,2]))))
}
Yk<-fft(Audio) #fast faourier transform
plot.frequency.spectrum(Audio)
Ticok<-fft(Audio@left) #audio file have left channel and right channel. choose left
plot.frequency.spectrum(Ticok[1:(length(Ticok)/2)])
plot.frequency.spectrum(Ticok[1:5000])
plot.frequency.spectrum(Audio)
spectrum(audio,span=20,log=c("no"))
spectrum(Audio,span=20,log=c("no"))
spectrum(Audio,flim=c(0,2))
spectrum(Audio,flim=c(0,2))
sr=8000
t=seq(0,2,1/sr)
y=(2^15-1)*sin(2*pi*440*t)
plot(y[1:500],type='l')
spectrum(y,span=20,log=c("no")) #spectrum under fourier transform
plot.frequency.spectrum<-function(x.k,xlimits=c(0, length(x.k))){
plot.data<-cbind(0:(length(x.k)-1), Mod(x.k))
#TODO: why this scaling is necessary?
plot.data[2:length(x.k),2]<-2*plot.data[2:length(x.k),2]
plot(plot.data,t='h',lwd=2,main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0, max(Mod(plot.data[,2]))))
}
Yk<-fft(y) #fast faourier transform
plot.frequency.spectrum(Yk)
spectrum(Audio)
spectrum(Audio,span=20,log=c("no"))
##a##
spectrum(Audio,span=20,log=c("no"))
##a##
spectrum(Audio,flim=c(0,2))
##a##
spectrum(Audio,span=20,log=c("no"))
timer(tico,f=22050, treshold=5, msmooth=c(50,0)) #f is freq, msmooth to smooth the line
spectrum(y,span=20,log=c("no")) #spectrum under fourier transform
plot.frequency.spectrum(Yk)
spectro(tico) #give spectogram
##a##
spectro(Audio)
##a##
spectro(Audio)
