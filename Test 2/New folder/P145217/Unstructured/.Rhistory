sqrt(x/10)
employees<-c(1,1,3,4,7,11)
count(employees)
length(employees)
sum(employees)
cumsum(employees)
employees*3
sum(employees*3)
y<-c(3,6,14,90,54,2,8,65,28,45,7)
y[=>30]
y[>=30]
y[y>=30]
y[y>30]
y[y<10]
length(y[y<=10])
y[1:5] <- y[1:5] + 5
y[1:5] <- y[1:5] + 5
y[1:5] + 5
y
y[1:5] + 5
y[1:5] <- y[1:5] + 5
y
y[1:5] + 5
y[1:5] <- y[1:5] + 5
y
(x/10)^2
(sum(employees))^3
y
y>30
y[y<10]
length(y[y>=10])
#3.
y<-c(3,6,14,90,54,2,8,65,28,45,7)
y>30
y[y<10]
length(y[y>=10])
y[1:5] <- y[1:5] + 5
y
y<-c(3,6,14,90,54,2,8,65,28,45)
Y<-matrix(y,nrow=5,ncol=2)
Y
Y<-matrix(y,nrow=5,ncol=2,byrow=TRUE)
Y
Y<-matrix(y,nrow=5)
y<-c(3,6,14,90,54,2,8,65,28,45)
Y<-matrix(y,nrow=5)
Y
Y<-matrix(y,ncol=5)
Y
• x<-c(56,8) #vector x
• y<-c(2,16) #vector y
x<-c(56,8) #vector x
y<-c(2,16) #vector y
A<-rbind(x,y) #combine x and y as rows
B<-cbind(x,y) #combine x and y as columns
x<-c(56,8) #vector x
y<-c(2,16) #vector y
A<-rbind(x,y) #combine x and y as rows
A
B
#scan function to enter data
v<-scan*()
#scan function to enter data
v<-scan()
v
source("~/.active-rstudio-document", echo=TRUE)
#scan function to enter data
v<-scan()
v
v*2
myscan<-matrix(scan(),ncol=3,byrow=TRUE)
myscan
mydata<-data.frame(name,age)
mydata
#Data Frame
name<-c("Ali","Abu","Ahmad")
age<-c(25,26,24)
mydata<-data.frame(name,age)
mydata
data()
trees
trees$girth
trees$Girth
attach(trees)
Girth
str(trees)
myx<-data.frame()
fix(myx)
myx
myx
fix(myx)
fix(myx)
myx
#list (imagine as a folder)
mylist<-list(mydata,new,b)
mylist
mylist[[2]]
mylist[2]
x
names(x)<-c("big","small")
x
names(myx)<-c("NAME","WEIGHT")
myx
#TIDYVERSE
library(tidyverse)
TREES<-as_tibble()
TREES<-as_tibble(trees)
TREES
#1.
#i)	What is the dimension for the matrix?
x<-c(4,6,8,2,3)
y<-c(1,9,3,5,7)
z<-c(6,4,2,7,1)
a<-rbind(x,y,z)
a
a<-cbind(x,y,z)
a
length(a)
dim(a)
#ii)	Add 3 to each element of the matrix.
a+3
#iii)	Find the transpose matrix.
t(a)
#iii)	Find the transpose matrix.
b<-t(a)
b
#iv)	Do matrix multipication of the matrix and its transpose.
a*b
#iv)	Do matrix multipication of the matrix and its transpose.
a*b %*%
#iv)	Do matrix multipication of the matrix and its transpose.
a*b %*%
#iv)	Do matrix multipication of the matrix and its transpose.
a*b %*%
#iv)	Do matrix multipication of the matrix and its transpose.
a%*%b
#iii)	Find the transpose matrix.
b<-t(a)
b
#iv)	Do matrix multipication of the matrix and its transpose.
a%*%b
#2
x<-c(1,2,3,2)
y<-c(2,1,6,4)
z<-c(4,7,2,5)
A<-rbind(x,y,z)
A
#2
x<-c(1,2,3,2)
y<-c(2,1,6,4)
z<-c(4,7,2,5)
e<-c(1,3,5,2)
f<-c(0,1,3,4)
g<-c(2,4,7,3)
h<-c(1,5,1,2)
A<-rbind(x,y,z)
B<-rbind(e,f,g,h)
A
B
#Find AB-1 and BAT.
solve(A%*%B)
#Find AB-1 and BAT.
solve(A%*%B)
#Find AB-1 and BAT.
(A%*%B)
#Find AB-1 and BAT.
AB<-(A%*%B)
AB
solve(AB)
#Find AB-1 and BAT.
AB<-(A%*%solve(B))
AB
BA<-(B%*%(t(A)))
BA
R<-rbind(x,y,z)
R
x<-c(56,27,43)
y<-c(120,68,32)
z<-c(43,34,110)
R<-rbind(x,y,z)
R
R<-cbind(x,y,z)
R
R[R<50]
R<50
setwd("C:/Users/PC 12/Desktop/P145217/Unstructured/")
library(tm)
mytext<-DirSource("TextFile")
mytext<-DirSource("TextFile")
mytext<-DirSource("TextMinig")
mytext<-DirSource("TextMining")
docs<-VCorpus(mytext)
docs <- tm_map(docs,content_transformer(tolower))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, " ", x))})
docs <- tm_map(docs, toSpace, "-")
docs <- tm_map(docs, toSpace, ":")
docs <- tm_map(docs, toSpace, "'")
docs <- tm_map(docs, toSpace, ".")
docs <- tm_map(docs, toSpace, ". ")
docs <- tm_map(docs, toSpace, " -")
docs <- tm_map(docs, removePunctuation) #remove punctuation
docs <- tm_map(docs, removeNumbers) #Strip digits
docs <- tm_map(docs, removeWords, stopwords("english")) #remove stopwords
docs <- tm_map(docs, stripWhitespace) #remove whitespace
tdm <- DocumentTermMatrix(docs) #Create document term matrix
tdm
dtm = DocumentTermMatrix(docs, control=list(wordLengths=c(2,30),
bounds=list(global=c(2,30))))
#Present text data numerically, weighted TF-IDF
tdm.tfidf <- weightTfIdf(tdm)
docs
inspect(docs)
inspect(docs)[[1]]
inspect(docs[[1]])
#Present text data numerically, weighted TF-IDF
tdm.tfidf <- weightTfIdf(tdm)
tdm.tfidf <- removeSparseTerms(tdm.tfidf, 0.999)
tfidf.matrix <- as.matrix(tdm.tfidf)
tfidf.matrix
# Cosine distance matrix (useful for specific clustering algorithms)
library(proxy)
dist.matrix <- dist(tfidf.matrix, method = "cosine"
)
dist.matrix
library(tm)
mytext<-DirSource("TextMining")
docs<-VCorpus(mytext)
inspect(docs\)
inspect(docs)
as.character(docs[[1]])
docs <- tm_map(docs,content_transformer(tolower))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, " ", x))})
docs <- tm_map(docs, toSpace, "-")
docs <- tm_map(docs, toSpace, ":")
docs <- tm_map(docs, toSpace, "'")
docs <- tm_map(docs, toSpace, ".")
docs <- tm_map(docs, toSpace, ". ")
docs <- tm_map(docs, toSpace, " -")
docs <- tm_map(docs, removePunctuation) #remove punctuation
docs <- tm_map(docs, removeNumbers) #Strip digits
docs <- tm_map(docs, removeWords, stopwords("english")) #remove stopwords
docs <- tm_map(docs, stripWhitespace) #remove whitespace
as.character(docs[[1]])
setwd("C:/Users/PC 12/Desktop/P145217/Unstructured/")
library(tm)
mytext<-DirSource("TextMining")
docs<-VCorpus(mytext)
docs <- tm_map(docs,content_transformer(tolower))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, " ", x))})
docs <- tm_map(docs, toSpace, "-")
docs <- tm_map(docs, toSpace, ":")
docs <- tm_map(docs, toSpace, "'")
docs <- tm_map(docs, toSpace, ".")
as.character(docs[[1]])
docs <- tm_map(docs, toSpace, "[-:'\\.-]")
as.character(docs[[1]])
mytext<-DirSource("TextMining")
docs<-VCorpus(mytext)
docs <- tm_map(docs,content_transformer(tolower))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, " ", x))})
docs <- tm_map(docs, toSpace, "[-:'\\.-]")
as.character(docs[[1]])
docs <- tm_map(docs, removePunctuation) #remove punctuation
docs <- tm_map(docs, removeNumbers) #Strip digits
docs <- tm_map(docs, removeWords, stopwords("english")) #remove stopwords
docs <- tm_map(docs, stripWhitespace) #remove whitespace
tdm <- DocumentTermMatrix(docs) #Create document term matrix
tdm
as.character(docs[[1]])
tdm
dtm = DocumentTermMatrix(docs, control=list(wordLengths=c(2,30),
bounds=list(global=c(2,30))))
#Present text data numerically, weighted TF-IDF
tdm.tfidf <- weightTfIdf(tdm)
tdm.tfidf <- removeSparseTerms(tdm.tfidf, 0.999)
tfidf.matrix <- as.matrix(tdm.tfidf)
# Cosine distance matrix (useful for specific clustering algorithms)
library(proxy)
dist.matrix <- dist(tfidf.matrix, method = "cosine")
dist.matrix
tfidf.matrix
tdm.tfidf
truth.K=2
#Perform clustering
library(dbscan)
clustering.kmeans <- kmeans(tfidf.matrix, truth.K)
clustering.hierarchical <- hclust(dist.matrix, method = "ward.D2")
clustering.dbscan <- hdbscan(dist.matrix, minPts = 10)
library(cluster)
install.packages(''dbscan)
install.packages('dbscan')
library(cluster)
library(cluster)
#Perform clustering
library(dbscan)
truth.K=2
#Perform clustering
library(dbscan)
clustering.kmeans <- kmeans(tfidf.matrix, truth.K)
clustering.hierarchical <- hclust(dist.matrix, method = "ward.D2")
clustering.dbscan <- hdbscan(dist.matrix, minPts = 10)
library(cluster)
clusplot(as.matrix(dist.matrix),clustering.kmeans$cl
uster,color=T,shade=T,labels=2,lines=0)
plot(clustering.hierarchical)
library(cluster)
clusplot(as.matrix(dist.matrix),clustering.kmeans$cl
uster,color=T,shade=T,labels=2,lines=0)
plot(clustering.hierarchical)
rect.hclust(clustering.hierarchical,2)
plot(as.matrix(dist.matrix),col=clustering.dbscan$cl
uster+1L)
#Combine results
master.cluster <- clustering.kmeans$cluster
slave.hierarchical <- cutree(clustering.hierarchical,
k = truth.K)
slave.dbscan <- clustering.dbscan$cluster
#plotting results
library(colorspace)
points <- cmdscale(dist.matrix, k = 2)
palette <- diverge_hcl(truth.K) # Creating a color
palette, need library(colorspace)
#layout(matrix(1:3,ncol=1))
plot(points, main = 'K-Means clustering', col = a
s.factor(master.cluster),
#layout(matrix(1:3,ncol=1))
plot(points, main = 'K-Means clustering', col = a
s.factor(master.cluster),
plot(points, main = 'Hierarchical clustering', col
= as.factor(slave.hierarchical),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Density-based clustering', c
ol = as.factor(slave.dbscan),
table(master.cluster)
table(slave.hierarchical)
table(slave.dbscan)
Appendix
#Elbow plot
#accumulator for cost results
cost_df <- data.frame()
#run kmeans for all clusters up to 100
for(i in 1:20){
#Run kmeans for each level of i, allowing up to
100 iterations for convergence
#layout(matrix(1:3,ncol=1))
plot(points, main = 'K-Means clustering',
col = as.factor(master.cluster),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Hierarchical clustering',
col = as.factor(slave.hierarchical),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Density-based clustering',
col = as.factor(slave.dbscan),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
table(master.cluster)
table(slave.hierarchical)
table(slave.dbscan)
#plotting results
library(colorspace)
points <- cmdscale(dist.matrix, k = 2)
palette <- diverge_hcl(truth.K) # Creating a color palette, need library(colorspace)
#layout(matrix(1:3,ncol=1))
plot(points, main = 'K-Means clustering',
col = as.factor(master.cluster),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Hierarchical clustering',
col = as.factor(slave.hierarchical),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Density-based clustering',
col = as.factor(slave.dbscan),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
table(master.cluster)
table(slave.hierarchical)
table(slave.dbscan)
#Elbow plot
#accumulator for cost results
cost_df <- data.frame()
#run kmeans for all clusters up to 100
for(i in 1:20){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=tfidf.matrix, centers=i, iter.max=100)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
plot(cost_df$cluster, cost_df$cost)
lines(cost_df$cluster, cost_df$cost)
setwd("C:/Users/PC 12/Desktop/P145217/Unstructured/")
library(tm)
mytext<-DirSource("TextMining")
docs<-VCorpus(mytext)
docs <- tm_map(docs,content_transformer(tolower))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, " ", x))})
docs <- tm_map(docs, toSpace, "[-:'\\.-]")
docs <- tm_map(docs, removePunctuation) #remove punctuation
docs <- tm_map(docs, removeNumbers) #Strip digits
docs <- tm_map(docs, removeWords, stopwords("english")) #remove stopwords
docs <- tm_map(docs, stripWhitespace) #remove whitespace
tdm <- DocumentTermMatrix(docs) #Create document term matrix
tdm
dtm = DocumentTermMatrix(docs, control=list(wordLengths=c(2,30),
bounds=list(global=c(2,30))))
#Present text data numerically, weighted TF-IDF
tdm.tfidf <- weightTfIdf(tdm)
tdm.tfidf <- removeSparseTerms(tdm.tfidf, 0.999)
tfidf.matrix <- as.matrix(tdm.tfidf)
# Cosine distance matrix (useful for specific clustering algorithms)
library(proxy)
dist.matrix <- dist(tfidf.matrix, method = "cosine")
truth.K=2
#Perform clustering
library(dbscan)
clustering.kmeans <- kmeans(tfidf.matrix, truth.K)
clustering.hierarchical <- hclust(dist.matrix, method = "ward.D2")
clustering.dbscan <- hdbscan(dist.matrix, minPts = 10)
library(cluster)
clusplot(as.matrix(dist.matrix),clustering.kmeans$cluster,color=T,shade=T,labels=2,lines=0)
clusplot(as.matrix(dist.matrix),clustering.kmeans$cluster,color=T,shade=T,labels=2,lines=0)
plot(clustering.hierarchical)
rect.hclust(clustering.hierarchical,2)
plot(as.matrix(dist.matrix),col=clustering.dbscan$cluster+1L)
clusplot(as.matrix(dist.matrix),clustering.kmeans$cluster,color=T,shade=T,labels=2,lines=0)
plot(clustering.hierarchical)
plot(as.matrix(dist.matrix),col=clustering.dbscan$cluster+1L)
plot(as.matrix(dist.matrix),col=clustering.dbscan$cluster+1L)
plot((dist.matrix),col=clustering.dbscan$cluster+1L)
plot((dist.matrix),col=clustering.dbscan$cluster)
plot((dist.matrix),col=clustering.dbscan$cluster+1L)
plot((dist.matrix),col=clustering.dbscan$cluster)
clustering.dbscan$cluster)
clustering.dbscan$cluster
dist.matrix
tfidf.matrix
tfidf.matrix[1,1]
tfidf.matrix[1:2,1:2]
tfidf.matrix[1:10,1:10]
#plotting results
library(colorspace)
points <- cmdscale(dist.matrix, k = 2)
palette <- diverge_hcl(truth.K) # Creating a color palette, need library(colorspace)
#layout(matrix(1:3,ncol=1))
plot(points, main = 'K-Means clustering',
col = as.factor(master.cluster),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Hierarchical clustering',
col = as.factor(slave.hierarchical),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Density-based clustering',
col = as.factor(slave.dbscan),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
table(master.cluster)
table(slave.hierarchical)
table(slave.dbscan)
#Elbow plot
#accumulator for cost results
cost_df <- data.frame()
#run kmeans for all clusters up to 100
for(i in 1:20){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=tfidf.matrix, centers=i, iter.max=100)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
plot(cost_df$cluster, cost_df$cost)
source("C:/Users/PC 12/Desktop/P145217/Unstructured/ClusterAnalysis.R")
#layout(matrix(1:3,ncol=1))
plot(points, main = 'K-Means clustering',
col = as.factor(master.cluster),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Hierarchical clustering',
col = as.factor(slave.hierarchical),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
plot(points, main = 'Density-based clustering',
col = as.factor(slave.dbscan),
mai = c(0, 0, 0, 0), mar = c(0, 0, 0, 0),
xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
table(master.cluster)
table(slave.hierarchical)
table(slave.dbscan)
#Elbow plot
#accumulator for cost results
cost_df <- data.frame()
#run kmeans for all clusters up to 100
for(i in 1:20){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=tfidf.matrix, centers=i, iter.max=100)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
plot(cost_df$cluster, cost_df$cost)
lines(cost_df$cluster, cost_df$cost)
clustering.kmeans$cluster
clustering.hierarchical$labels
clustering.hierarchical$order
clustering.dbscan
clustering.hierarchical
clustering.kmeans
source("C:/Users/PC 12/Desktop/P145217/Unstructured/ClusterAnalysis.R")
