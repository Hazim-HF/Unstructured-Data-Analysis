library(seewave)
library(rpanel)
library(tuneR)
# upload data of a lion roar
lion = readMP3('Data/lion_roar.mp3')
str(lion)
# define plot for frequency spectrum analysis
plot.frequency.spectrum = function(X.k, xlimits = c(0, length(X.k))) {
plot.data = cbind(0:(length(X.k) - 1), Mod(X.k))
plot.data[2:length(X.k), 2] = 2 * plot.data[2:length(X.k), 2]
plot(plot.data, t = "h", lwd = 2,
main = "Frequency Spectrum of (FFT) of Lion's Roar",
xlab = "Frequency (Hz)", ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
plot(lion)
timer(lion, f=lion@samp.rate,
threshold=50,
msmooth=c(4000,0),
main = 'Temporal Segmentation of Lion Roar')
lion_r = fft(lion@left)
plot.frequency.spectrum(lion_r)
spectro(lion, main = "Spectrogram of Lion Roar")
# upload data of a crying man
cry = readMP3('Data/crying_man.mp3')
str(cry)
plot(cry)
timer(cry,
f=cry@samp.rate,
threshold = 20,
msmooth = c(3000,0),
main = 'Temporal Segmentation of Man Crying')
plot.frequency.spectrum = function(X.k, xlimits = c(0, length(X.k))) {
plot.data = cbind(0:(length(X.k) - 1), Mod(X.k))
plot.data[2:length(X.k), 2] = 2 * plot.data[2:length(X.k), 2]
plot(plot.data, t = "h", lwd = 2,
main = "Frequency Spectrum of (FFT) of Man's Crying",
xlab = "Frequency (Hz)", ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
cry_m = fft(cry@left)
plot.frequency.spectrum(cry_m)
spectro(cry, main = 'Spectrogram of man crying')
spectro(lion, main = "Spectrogram of Lion Roar")
plot(cry)
timer(cry,
f=cry@samp.rate,
threshold = 20,
msmooth = c(3000,0),
main = 'Temporal Segmentation of Man Crying')
timer(cry,
f=cry@samp.rate,
threshold = 25,
msmooth = c(3000,0),
main = 'Temporal Segmentation of Man Crying')
timer(cry,
f=cry@samp.rate,
threshold = 30,
msmooth = c(3000,0),
main = 'Temporal Segmentation of Man Crying')
timer(cry,
f=cry@samp.rate,
threshold = 25,
msmooth = c(1000,0),
main = 'Temporal Segmentation of Man Crying')
timer(cry,
f=cry@samp.rate,
threshold = 25,
msmooth = c(2000,0),
main = 'Temporal Segmentation of Man Crying')
timer(cry,
f=cry@samp.rate,
threshold = 25,
msmooth = c(2500,0),
main = 'Temporal Segmentation of Man Crying')
timer(cry,
f=cry@samp.rate,
threshold = 25,
msmooth = c(3000,0),
main = 'Temporal Segmentation of Man Crying')
plot(lion, main = "",
ylab = 'jai')
plot(lion, main = "",
ylab = 'jai')
plot(lion, main = "")
plot(lion, main = "", xlab = "Time (seconds)")
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
plot(cry, main = "Waveform Plot of Man's Crying, xlab = "Time (seconds)")
plot(cry, main = "Waveform Plot of Man's Crying", xlab = "Time (seconds)")
par(mfrow(c=(2, 1)))
par(mfrow(c(2, 1))
par(mfrow=c(2, 1))
par(mfrow = (2, 1))
par(mfrow = c(2, 1))
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
plot(cry, main = "Waveform Plot of Man's Crying", xlab = "Time (seconds)")
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
plot(cry, main = "Waveform Plot of Man's Crying", xlab = "Time (seconds)")
par(mfrow = c(1, 2))
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
plot(cry, main = "Waveform Plot of Man's Crying", xlab = "Time (seconds)")
par(mfrow = c(2, 2))
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
plot(cry, main = "Waveform Plot of Man's Crying", xlab = "Time (seconds)")
plot(lion, main = "Waveform Plot of Lion's Roar", xlab = "Time (seconds)")
timer(lion, f=lion@samp.rate,
threshold=50,
msmooth=c(4000,0),
main = 'Timer Plot of Lion Roar')
plot(cry, main = "Waveform Plot of Man's Crying", xlab = "Time (seconds)")
spectro(cry, main = 'Spectrogram of man crying')
timer(cry,
f=cry@samp.rate,
threshold = 25,
msmooth = c(3000,0),
main = 'Timer Plot of Man Crying')
lion_r = fft(lion@left)
plot.frequency.spectrum(lion_r)
# define plot for frequency spectrum analysis
plot.frequency.spectrum = function(X.k, xlimits = c(0, length(X.k))) {
plot.data = cbind(0:(length(X.k) - 1), Mod(X.k))
plot.data[2:length(X.k), 2] = 2 * plot.data[2:length(X.k), 2]
plot(plot.data, t = "h", lwd = 2,
main = "Frequency Spectrum of (FFT) of Lion's Roar",
xlab = "Frequency (Hz)", ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
lion_r = fft(lion@left)
plot.frequency.spectrum(lion_r)
plot.frequency.spectrum = function(X.k, xlimits = c(0, length(X.k))) {
plot.data = cbind(0:(length(X.k) - 1), Mod(X.k))
plot.data[2:length(X.k), 2] = 2 * plot.data[2:length(X.k), 2]
plot(plot.data, t = "h", lwd = 2,
main = "Frequency Spectrum of (FFT) of Man's Crying",
xlab = "Frequency (Hz)", ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
cry_m = fft(cry@left)
plot.frequency.spectrum(cry_m)
