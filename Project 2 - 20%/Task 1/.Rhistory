getwd()
building_g = load.image('data/Building_grayscale.jpeg')
library(imager)
building_g = load.image('data/Building_grayscale.jpeg')
building_g = load.image('data/Building_grayscale.jpeg')
plot(building_g)
?readWave
library(seewave)
lion = readWave('Data/lion_roar.mp3')
lion = readWave('Data/lion_roar.mp3')
library(seewave)
library(tuneR)
lion = readWave('Data/lion_roar.mp3')
library(seewave)
library(rpanel)
lion = readWave('Data/lion_roar.mp3')
lion = readMP3('Data/lion_roar.mp3')
play(lion)
cry = readMP3('Data/crying_man.mp3')
play(cry)
library(tuneR)
library(seewave)
# Let's make a sine wave and play it
help(Wave)
sr = 8000  # the sampling rate
t = seq(0, 2, 1/sr)  # times in secs if sample for 2 seconds at 8KHz
y = (2^15-1)*sin(2*pi*440*t)  # sine wave at 440 Hz scaled to fill out 16 bit range
plot(y[1:500], type="l")
w = Wave(y, samp.rate = sr, bit = 16)  # make the Wave representation
#play(w)
plot(y[1:500], type="l")
y1 = (2^15-1)*sin(2*pi*220*t)
w1 = Wave(y1, samp.rate = sr, bit = 16)
#play(w1)
# Compare w and w1
par(mfrow=c(2,1))  # layout parallel
plot(y[1:500], type="l")
plot(y1[1:500], type="l")
# Compare in 1 layout (make redundant graph for easier comparison)
par(mfrow=c(1,1))
plot(y[1:500], type="l")  # plot y above
lines(y1[1:500], lty=3, col="red")  # plot y1 in plot y
# Try create another
wsum = normalize(w+w1, unit='16')  # must normalize to make it also 16hz
play(wsum)
plot((y+y1)[1:500], type="l")  # plot from 1 to 500
w3 <- normalize(bind(w, w1, wsum), unit='16')
play(w3)
y3 <- c(y, y1, y+y1)
plot(y3, type="l")
# The above to create manually. Next we will use the function in tuneR
# Other types of waveforms
?sine
Au1 <- sine(500, duration=100000)  # 100=freq, duration 100000 = ~2.2s
play(Au1)
writeWave(Au1, 'Audio1.wav')  # save data
Au11 <- readWave('Audio1.wav')  # read the audio
Au2 <- noise(duration = 100000)  # look noise function from ?sine
play(Au2)  # seems sound broken like TV/radio
Au2 <- noise(kind='pink', duration = 100000)  # change to pink noise (correlated noise)
play(Au2)
Au3 <- pulse(220, duration = 100000)
play(Au3)
# Plot 3 signals above
par(mfrow=c(3,1))
plot(Au1[1:1000])  # The first 1000 signal for Au1
plot(Au2[1:1000])
plot(Au3[1:1000])
# Other signals in ?sine
Au4 <- sawtooth(100, duration = 100000)
play(Au4)
plot(Au4[1:1000])
plot(Au4[1:2000])
Au5 <- square(200, duration = 100000)
play(Au5)
plot(Au5[1:2000])
# Combine all Au1 to Au5
Asum = normalize(bind(Au1, Au2, Au3, Au4, Au5), unit='32')
play(Asum)
Au6 = normalize(bind(Au1 + Au2), unit='32')
play(Au6)
list.dirs()
list.dirs('./Data')
list.dirs('Data')
flower_c = load.image('Data/Flower_colour.jpg')
plot(flower_c)
flower_g = load.image('Data/Flower_grayscale.jpg')
plot(flower_g)
scenery_c = load.image('Data/Scenery_colour.jpg')
plot(scenery_c)
scenery_g = load.image('Data/Scenery_grayscale.jpeg')
plot(scenery_g)
person_c = load.image('Data/Person_colour.jpg')
plot(person_c)
person_g = load.image('Data/Person_grayscale.jpg')
plot(person_g)
building_c = load.image('Data/Building_colour.jpeg')
plot(building_c)
